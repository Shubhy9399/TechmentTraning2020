{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial Black;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green176\blue80;\red75\green172\blue198;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\ul\b\f0\fs48\lang9 File security In Linux\par
\ulnone\b0\f1\fs22\par

\pard\sa200\sl276\slmult1\ul\b\fs28 Access rights\ulnone\b0 :  Linux's first line of defense\par
\cf1\b The Linux security model is based on the one used on UNIX systems, and is as rigid as the UNIX security model (and sometimes even more), which is already quite robust.\cf0\b0  On a Linux system, every file is owned by a user and a group user. There is also a third category of users, those that are not the user owner and don't belong to the group owning the file. For each category of users, read, write and execute permissions can be granted or denied.\par
\par
We already used the long option to list files using the ls -l command, though for other reasons. This command also displays file permissions for these three user categories; they are indicated by the nine characters that follow the first character, which is the file type indicator at the beginning of the file properties line. As seen in the examples below, the first three characters in this series of nine display access rights for the actual user that owns the file. The next three are for the group owner of the file, the last three for other users. The permissions are always in the same order: read, write, execute for the user, the group and the others. Some examples:\par
\par
\par
\cf1\b marise:~> ls -l To_Do\par
-rw-rw-r--    1 marise  users      5 Jan 15 12:39 To_Do\par
marise:~> ls -l /bin/ls\par
-rwxr-xr-x    1 root    root   45948 Aug  9 15:01 /bin/ls*\par
\cf0\b0 The first file is a regular file (first dash). Users with user name marise or users belonging to the group users can read and write (change/move/delete) the file, but they can't execute it (second and third dash). All other users are only allowed to read this file, but they can't write or execute it (fourth and fifth dash).\par
\par
The second example is an executable file, the difference: everybody can run this program, but you need to be root to change it.\par
\par
The Info pages explain how the ls command handles display of access rights in detail, see the section What information is listed.\par
\par
For easy use with commands, both access rights or modes and user groups have a code. See the tables below.\par
\par
\ul\b  Access mode codes\par
\ulnone\b0\par
Code\tab Meaning\par
0 or -\tab The access right that is supposed to be on this place is not granted.\par
4 or r\tab read access is granted to the user category defined in this place\par
2 or w\tab write permission is granted to the user category defined in this place\par
1 or x\tab execute permission is granted to the user category defined in this place\par
 \cf1\b User group codes\par
\cf0\b0\par
Code\tab Meaning\par
\cf1\b u\tab user permissions\par
g\tab group permissions\par
o\tab permissions for others\cf0\b0\par
This straight forward scheme is applied very strictly, which allows a high level of security even without network security. Among other functions, the security scheme takes care of user access to programs, it can serve files on a need-to-know basis and protect sensitive data such as home directories and system configuration files.\par
\par
You should know what your user name is. If you don't, it can be displayed using the id command, which also displays the default group you belong to and eventually other groups of which you are a member:\par
\par
\par
\cf1\b tilly:~> id\par
uid=504(tilly) gid=504(tilly) groups=504(tilly),100(users),2051(org)\par
Your user name is also stored in the environment variable USER:\par
\par
\par
tilly:~> echo $USER\par
tilly\par
\cf0\ul  The tools\par
\ulnone\b0  \cf1\b The chmod command\par
\cf0\b0 A normal consequence of applying strict file permissions, and sometimes a nuisance, is that access rights will need to be changed for all kinds of reasons. We use the chmod command to do this, and eventually to chmod has become an almost acceptable English verb, meaning the changing of the access mode of a file. The chmod command can be used with alphanumeric or numeric options, whatever you like best.\par
\par
The example below uses alphanumeric options in order to solve a problem that commonly occurs with new users:\par
\par
\par
\cf1\b asim:~> ./hello\par
bash: ./hello: bad interpreter: Permission denied\par
\par
asim:~> cat hello\par
#!/bin/bash\par
echo "Hello, World"\par
\par
asim:~> ls -l hello\par
-rw-rw-r--    1 asim    asim    32 Jan 15 16:29 hello\par
\par
asim:~> chmod u+x hello\par
\par
asim:~> ./hello\par
Hello, World\par
\par
asim:~> ls -l hello\par
-rwxrw-r--   1 asim    asim    32 Jan 15 16:29 hello*\par
\cf0\b0 The + and - operators are used to grant or deny a given right to a given group. Combinations separated by commas are allowed. The Info and man pages contain useful examples. Here's another one, which makes the file from the previous example a private file to user asim:\par
\par
\par
\cf1\b asim:~> chmod u+rwx,go-rwx hello\par
\par
asim:~> ls -l hello\par
-rwx------    1 asim    asim    32 Jan 15 16:29 hello*\cf0\b0\par
The kind of problem resulting in an error message saying that permission is denied somewhere is usually a problem with access rights in most cases. Also, comments like, "It worked yesterday," and "When I run this as root it works," are most likely caused by the wrong file permissions.\par
\par
When using chmod with numeric arguments, the values for each granted access right have to be counted together per group. Thus we get a 3-digit number, which is the symbolic value for the settings chmod has to make. The following table lists the most common combinations:\par
\par
 \ul\b File protection with chmod\par
\ulnone\b0\par
Command\tab Meaning\par
\cf2\b chmod 400 file\tab To protect a file against accidental overwriting.\par
chmod 500 directory\tab To protect yourself from accidentally removing, renaming or moving files from this directory.\par
chmod 600 file\tab A private file only changeable by the user who entered this command.\par
chmod 644 file\tab A publicly readable file that can only be changed by the issuing user.\par
chmod 660 file\tab Users belonging to your group can change this file, others don't have any access to it at all.\par
chmod 700 file\tab Protects a file against any access from other users, while the issuing user still has full access.\par
chmod 755 directory\tab For files that should be readable and executable by others, but only changeable by the issuing user.\par
chmod 775 file\tab Standard file sharing mode for a group.\par
chmod 777 file\tab Everybody can do everything to this file.\par
\cf0\b0 If you enter a number with less than three digits as an argument to chmod, omitted characters are replaced with zeros starting from the left. There is actually a fourth digit on Linux systems, that precedes the first three and sets special access modes. Everything about these and many more are located in the Info pages.\par
\par
\ul\b Logging on to another group\par
\ulnone\b0 When you type id on the command line, you get a list of all the groups that you can possibly belong to, preceded by your user name and ID and the group name and ID that you are currently connected with. However, on many Linux systems you can only be actively logged in to one group at the time. By default, this active or primary group is the one that you get assigned from the /etc/passwd file. The fourth field of this file holds users' primary group ID, which is looked up in the /etc/group file. An example:\par
\par
\par
\cf1\b asim:~> id\par
uid=501(asim) gid=501(asim) groups=100(users),501(asim),3400(web)\par
\par
asim:~> grep asim /etc/passwd\par
asim:x:501:501:Asim El Baraka:/home/asim:/bin/bash\par
\par
asim:~> grep 501 /etc/group\par
asim:x:501:\par
\cf0\b0 The fourth field in the line from /etc/passwd contains the value "501", which represents the group asim in the above example. From /etc/group we can get the name matching this group ID. When initially connecting to the system, this is the group that asim will belong to.\par
\par
\b Note:-\tab User private group scheme\par
\b0  \tab\par
In order to allow more flexibility, most Linux systems follow the so-called user private group scheme, that assigns each user primarily to his or her own group. This group is a group that only contains this particular user, hence the name "private group". Usually this group has the same name as the user login name, which can be a bit confusing.\par
\par
Apart from his own private group, user asim can also be in the groups users and web. Because these are secondary groups to this user, he will need to use the newgrp to log into any of these groups (use gpasswd for setting the group password first). In the example, asim needs to create files that are owned by the group web.\par
\par
\par
\cf1\b asim:/var/www/html> newgrp web\par
\par
asim:/var/www/html> id\par
uid=501(asim) gid=3400(web) groups=100(users),501(asim),3400(web)\par
\cf0\b0 When asim creates new files now, they will be in group ownership of the group web instead of being owned by the group asim:\par
\par
\par
\cf1\b asim:/var/www/html> touch test\par
\par
asim:/var/www/html> ls -l test\par
-rw-rw-r--  1 asim web   0 Jun 10 15:38 test\par
\cf0\b0 Logging in to a new group prevents you from having to use chown  or calling your system administrator to change ownerships for you.\par
\par
See the manpage for newgrp for more information.\par
\ul\b\par
The file mask\par
\ulnone\b0 When a new file is saved somewhere, it is first subjected to the standard security procedure. Files without permissions don't exist on Linux. The standard file permission is determined by the mask for new file creation. The value of this mask can be displayed using the umask command:\par
\par
\par
\cf1\b bert:~> umask\par
0002\par
\cf0\b0 Instead of adding the symbolic values to each other, as with chmod, for calculating the permission on a new file they need to be subtracted from the total possible access rights. In the example above, however, we see 4 values displayed, yet there are only 3 permission categories: user, group and other. The first zero is part of the special file attributes settings, which we will discuss in Section 3.4.2.4 and Section 4.1.6. It might just as well be that this first zero is not displayed on your system when entering the umask command, and that you only see 3 numbers representing the default file creation mask.\par
\par
Each UNIX-like system has a system function for creating new files, which is called each time a user uses a program that creates new files, for instance, when downloading a file from the Internet, when saving a new text document and so on. This function creates both new files and new directories. Full read, write and execute permission is granted to everybody when creating a new directory. When creating a new file, this function will grant read and write permissions for everybody, but set execute permissions to none for all user categories. This, before the mask is applied, a directory has permissions 777 or rwxrwxrwx, a plain file 666 or rw-rw-rw-.\par
\par
The umask value is subtracted from these default permissions after the function has created the new file or directory. Thus, a directory will have permissions of 775 by default, a file 664, if the mask value is (0)002. This is demonstrated in the example below:\par
\par
\par
\cf1\b bert:~> mkdir newdir\par
\par
bert:~> ls -ld newdir\par
drwxrwxr-x    2 bert    bert\tab\tab 4096 Feb 28 13:45 newdir/\par
\par
bert:~> touch newfile\par
\par
bert:~> ls -l newfile\par
-rw-rw-r--    1 bert    bert\tab\tab    0 Feb 28 13:52 newfile\par
Note\tab Files versus directories\par
 \tab\par
A directory gets more permissions by default: it always has the execute permission. If it wouldn't have that, it would not be accessible. Try this out by chmodding a directory 644!\par
\par
\cf0\b0 If you log in to another group using the newgrp command, the mask remains unchanged. Thus, if it is set to 002, files and directories that you create while being in the new group will also be accessible to the other members of that group; you don't have to use chmod.\par
\par
The root user usually has stricter default file creation permissions:\par
\par
\par
[root@estoban root]# umask\par
022\par
These defaults are set system-wide in the shell resource configuration files, for instance /etc/bashrc or /etc/profile. You can change them in your own shell configuration file, see Chapter 7 on customizing your shell environment.\par
\par
\ul\b Changing user and group ownership\par
\ulnone\b0 When a file is owned by the wrong user or group, the error can be repaired with the chown (change owner) and chgrp (change group) commands. Changing file ownership is a frequent system administrative task in environments where files need to be shared in a group. Both commands are very flexible, as you can find out by using the --help option.\par
\par
The chown command can be applied to change both user and group ownership of a file, while chgrp only changes group ownership. Of course the system will check if the user issuing one of these commands has sufficient permissions on the file(s) she wants to change.\par
\par
In order to only change the user ownership of a file, use this syntax:\par
\par
chown newuser file\par
\par
If you use a colon after the user name (see the Info pages), group ownership will be changed as well, to the primary group of the user issuing the command. On a Linux system, each user has his own group, so this form can be used to make files private:\par
\par
\par
\cf1\b jacky:~> id\par
uid=1304(jacky) gid=(1304) groups=1304(jacky),2034(pproject)\par
\par
jacky:~> ls -l my_report\par
-rw-rw-r--  1 jacky   project       29387 Jan 15 09:34 my_report\par
\par
jacky:~> chown jacky: my_report\par
\par
jacky:~> chmod o-r my_report\par
\par
jacky:~> ls -l my_report\par
-rw-rw----  1 jacky   jacky         29387 Jan 15 09:34 my_report\par
If jacky would like to share this file, without having to give everybody permission to write it, he can use the chgrp command:\par
\par
\par
jacky:~> ls -l report-20020115.xls\par
-rw-rw---- 1 jacky   jacky   45635 Jan 15 09:35 report-20020115.xls\par
\par
jacky:~> chgrp project report-20020115.xls\par
\par
jacky:~> chmod o= report-20020115.xls\par
\par
jacky:~> ls -l report-20020115.xls\par
-rw-rw---- 1 jacky   project 45635 Jan 15 09:35 report-20020115.xls\par
\cf0\b0 This way, users in the group project will be able to work on this file. Users not in this group have no business with it at all.\par
\par
Both chown and chgrp can be used to change ownership recursively, using the -R option. In that case, all underlying files and subdirectories of a given directory will belong to the given user and/or group.\par
\par
\b Note\tab Restrictions\b0\par
 \tab\par
On most systems, the use of the chown and chgrp commands is restricted for non-privileged users. If you are not the administrator of the system, you can not change user nor group ownerships for security reasons. If the usage of these commands would not be restricted, malicious users could assign ownership of files to other users and/or groups and change behavior of those users' environments and even cause damage to other users' files.\par
\ul\b  Special modes\ulnone\b0\par
For the system admin to not be bothered solving permission problems all the time, special access rights can be given to entire directories, or to separate programs. There are three special modes:\par
\par
Sticky bit mode: After execution of a job, the command is kept in the system memory. Originally this was a feature used a lot to save memory: big jobs are loaded into memory only once. But these days memory is inexpensive and there are better techniques to manage it, so it is not used anymore for its optimizing capabilities on single files. When applied to an entire directory, however, the sticky bit has a different meaning. In that case, a user can only change files in this directory when she is the user owner of the file or when the file has appropriate permissions. This feature is used on directories like /var/tmp, that have to be accessible for everyone, but where it is not appropriate for users to change or delete each other's data. The sticky bit is indicated by a t at the end of the file permission field:\par
\par
\par
\cf1\b mark:~> ls -ld /var/tmp\par
drwxrwxrwt   19 root     root         8192 Jan 16 10:37 /var/tmp/\par
\cf0\b0 The sticky bit is set using the command chmod o+t directory. The historic origin of the "t" is in UNIX' save Text access feature.\par
\par
SUID (set user ID) and SGID (set group ID): represented by the character s in the user or group permission field. When this mode is set on an executable file, it will run with the user and group permissions on the file instead of with those of the user issuing the command, thus giving access to system resources. We will discuss this further in Chapter 4.\par
\par
SGID (set group ID) on a directory: in this special case every file created in the directory will have the same group owner as the directory itself (while normal behavior would be that new files are owned by the users who create them). This way, users don't need to worry about file ownership when sharing directories:\par
\par
\par
\cf1\b mimi:~> ls -ld /opt/docs\par
drwxrws---  4 root    users          4096 Jul 25 2001 docs/\par
\par
mimi:~> ls -l /opt/docs\par
-rw-rw----  1 mimi    users        345672 Aug 30 2001-Council.doc\par
\cf0\b0 This is the standard way of sharing files in UNIX.\par
}
 